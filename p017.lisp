(defvar *numerals* (make-hash-table))

(defun add-numeral (n s)
  (setf (gethash n *numerals*) s))

(defun fill-numerals ()
  (add-numeral 0 "Zero")
  (add-numeral 1 "One")
  (add-numeral 2 "Two")
  (add-numeral 3 "Three")
  (add-numeral 4 "Four")
  (add-numeral 5 "Five")
  (add-numeral 6 "Six")
  (add-numeral 7 "Seven")
  (add-numeral 8 "Eight")
  (add-numeral 9 "Nine")
  (add-numeral 10 "Ten")
  (add-numeral 11 "Eleven")
  (add-numeral 12 "Twelve")
  (add-numeral 13 "Thirteen")
  (add-numeral 14 "Fourteen")
  (add-numeral 15 "Fifteen")
  (add-numeral 16 "Sixteen")
  (add-numeral 17 "Seventeen")
  (add-numeral 18 "Eighteen")
  (add-numeral 19 "Nineteen")
  (add-numeral 20 "Twenty")
  (add-numeral 30 "Thirty")
  (add-numeral 40 "Forty")
  (add-numeral 50 "Fifty")
  (add-numeral 60 "Sixty")
  (add-numeral 70 "Seventy")
  (add-numeral 80 "Eighty")
  (add-numeral 90 "Ninety")
  (add-numeral 100 "Hundred")
  (add-numeral 1000 "Thousand")
  (add-numeral 1000000 "Million")
  (add-numeral 1000000000 "Billion")
  (add-numeral 1000000000000 "Trillion"))

(defun small-num-to-string (n)
  (cond ((>= n 100) (cons (gethash (floor n 100) *numerals*)
                          (cons (gethash 100 *numerals*)
                                (when (not (zerop (mod n 100))) (small-num-to-string (mod n 100))))))
        ((<= n 20) (cons (gethash n *numerals*) nil))
        (t (cons (gethash (* 10 (floor n 10)) *numerals*)
                 (when (not (zerop (mod n 10)))
                   (small-num-to-string (mod n 10)))))))

(defun num-to-string (n)
  (let ((pow 1))
    (labels ((f (n pow)
               (let ((cur (floor n (/ pow 1000))))
                 (if (= pow 1) nil
                     (append (when (> cur 0)
                               (small-num-to-string cur))
                             (when (and (> pow 1000) (> cur 0))
                               (list (gethash (/ pow 1000) *numerals*)))
                             (f (mod n (/ pow 1000)) (/ pow 1000)))))))
      (loop until (> pow n) do (setf pow (* pow 1000)))
      (if (zerop n)
          (small-num-to-string n)
          (f n pow)))))

(fill-numerals)

(loop repeat (read) do
  (format t "~{~A ~}~%" (num-to-string (read))))
